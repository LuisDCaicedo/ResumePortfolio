Parameters:

    EnvironmentName:
      Description: An environment name that will be prefixed to resources
      Type: String
      
Resources:

    S3Role:
      Type: 'AWS::IAM::Role'
      Properties:
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Principal:
                Service:
                - ec2.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        Path: /
    S3RolePolicies:
      Type: 'AWS::IAM::Policy'
      Properties:
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: 
                - "s3:Get*"
                - "s3:List*"
              Resource: "*"
        PolicyName: "root"
        Roles:
          - Ref: S3Role


    S3InstanceProfile:
      Type: 'AWS::IAM::InstanceProfile'
      Properties:
        Path: /
        Roles:
          - Ref: S3Role

    LBSecGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allow HTTP to our load balancer
        VpcId:
          Fn::ImportValue:
            !Sub "${EnvironmentName}-VPCID"  
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
    WebServerSecGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allow Http to our Host and ssh from local only
        VpcId:
          Fn::ImportValue:
            !Sub "${EnvironmentName}-VPCID" 
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
          - IpProtocol: tcp
            FromPort: 0
            ToPort: 65535
            CidrIp: 0.0.0.0/0
    WebAppLaunchConfig: 
      Type: AWS::AutoScaling::LaunchConfiguration
      Properties:
        UserData:
          Fn::Base64: 
             !Sub | 
               #!/bin/bash
               sudo -s 
               apt-get update -y
               apt-get install unzip awscli -y
               apt-get install apache2 -y
               systemctl start apache2.service
               cd /var/www/html/
               aws s3 cp s3://udacity-demo-1/udacity.zip .
               unzip -o udacity.zip
        ImageId: ami-0ac73f33a1888c64a
        IamInstanceProfile: !Ref S3InstanceProfile
        SecurityGroups:
          - Ref: WebServerSecGroup
        InstanceType: t3.medium
        BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: 10
    WebAppGroup: 
      Type: AWS::AutoScaling::AutoScalingGroup
      Properties:
        VPCZoneIdentifier:
        - Fn::ImportValue:
            !Sub "${EnvironmentName}-PRIV-NETS"
        LaunchConfigurationName:
          Ref: WebAppLaunchConfig
        MaxSize: '4'
        MinSize: '2'
        TargetGroupARNs:
          - Ref: WebAppTargetGroup
    WebAppLB:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        Scheme: internet-facing
        Subnets:
          - Fn::ImportValue: !Sub ${EnvironmentName}-PUB1-SN 
          - Fn::ImportValue: !Sub ${EnvironmentName}-PUB2-SN 
        SecurityGroups:
          - Ref: LBSecGroup
    Listener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        DefaultActions:
          - Type: forward
            TargetGroupArn: 
              Ref: WebAppTargetGroup
        LoadBalancerArn: 
          Ref: WebAppLB
        Port: 80
        Protocol: HTTP
    ALBListenerRule: 
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
          - Type: forward
            TargetGroupArn: !Ref WebAppTargetGroup
        Conditions:
          - Field: path-pattern
            Values: [/]
        ListenerArn: !Ref Listener
        Priority: 1
    WebAppTargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        HealthCheckEnabled: true
        HealthCheckIntervalSeconds: 35
        HealthCheckPath: /
        HealthCheckProtocol: HTTP
        HealthCheckTimeoutSeconds: 30
        HealthyThresholdCount: 2
        Port: 80
        Protocol: HTTP
        UnhealthyThresholdCount: 5
        VpcId:
          Fn::ImportValue:
            Fn::Sub: "${EnvironmentName}-VPCID"

Outputs:

  WebAppLB:
      Description: Load Balancer Url 
      Value: !Sub "Http://${WebAppLB.DNSName}"
      Export:
        Name: !Sub ${EnvironmentName}-ELB-URL